{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util'),\n  isValidUTF8 = require('./Validation'),\n  ErrorCodes = require('./ErrorCodes'),\n  BufferPool = require('./BufferPool'),\n  bufferUtil = require('./BufferUtil'),\n  PerMessageDeflate = require('./PerMessageDeflate');\n\n/**\n * HyBi Receiver implementation\n */\n\nfunction Receiver(extensions, maxPayload) {\n  if (this instanceof Receiver === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n  if (typeof extensions === 'number') {\n    maxPayload = extensions;\n    extensions = {};\n  }\n\n  // memory pool for fragmented messages\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function (db, length) {\n    return db.used + length;\n  }, function (db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ? Math.ceil((fragmentedPoolPrevUsed + db.used) / 2) : db.used;\n  });\n\n  // memory pool for unfragmented messages\n  var unfragmentedPoolPrevUsed = -1;\n  this.unfragmentedBufferPool = new BufferPool(1024, function (db, length) {\n    return db.used + length;\n  }, function (db) {\n    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ? Math.ceil((unfragmentedPoolPrevUsed + db.used) / 2) : db.used;\n  });\n  this.extensions = extensions || {};\n  this.maxPayload = maxPayload || 0;\n  this.currentPayloadLength = 0;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.overflow = [];\n  this.headerBuffer = new Buffer(10);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.expectHeader(2, this.processPacket);\n  this.dead = false;\n  this.processing = false;\n  this.onerror = function () {};\n  this.ontext = function () {};\n  this.onbinary = function () {};\n  this.onclose = function () {};\n  this.onping = function () {};\n  this.onpong = function () {};\n}\nmodule.exports = Receiver;\n\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function (data) {\n  if (this.dead) return;\n  var dataLength = data.length;\n  if (dataLength == 0) return;\n  if (this.expectBuffer == null) {\n    this.overflow.push(data);\n    return;\n  }\n  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);\n  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);\n  this.expectOffset += toRead;\n  if (toRead < dataLength) {\n    this.overflow.push(data.slice(toRead));\n  }\n  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {\n    var bufferForHandler = this.expectBuffer;\n    this.expectBuffer = null;\n    this.expectOffset = 0;\n    this.expectHandler.call(this, bufferForHandler);\n  }\n};\n\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\nReceiver.prototype.cleanup = function () {\n  this.dead = true;\n  this.overflow = null;\n  this.headerBuffer = null;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.unfragmentedBufferPool = null;\n  this.fragmentedBufferPool = null;\n  this.state = null;\n  this.currentMessage = null;\n  this.onerror = null;\n  this.ontext = null;\n  this.onbinary = null;\n  this.onclose = null;\n  this.onping = null;\n  this.onpong = null;\n};\n\n/**\n * Waits for a certain amount of header bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectHeader = function (length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Waits for a certain amount of data bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectData = function (length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Allocates memory from the buffer pool.\n *\n * @api private\n */\n\nReceiver.prototype.allocateFromPool = function (length, isFragmented) {\n  return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length);\n};\n\n/**\n * Start processing a new packet.\n *\n * @api private\n */\n\nReceiver.prototype.processPacket = function (data) {\n  if (this.extensions[PerMessageDeflate.extensionName]) {\n    if ((data[0] & 0x30) != 0) {\n      this.error('reserved fields (2, 3) must be empty', 1002);\n      return;\n    }\n  } else {\n    if ((data[0] & 0x70) != 0) {\n      this.error('reserved fields must be empty', 1002);\n      return;\n    }\n  }\n  this.state.lastFragment = (data[0] & 0x80) == 0x80;\n  this.state.masked = (data[1] & 0x80) == 0x80;\n  var compressed = (data[0] & 0x40) == 0x40;\n  var opcode = data[0] & 0xf;\n  if (opcode === 0) {\n    if (compressed) {\n      this.error('continuation frame cannot have the Per-message Compressed bits', 1002);\n      return;\n    }\n    // continuation frame\n    this.state.fragmentedOperation = true;\n    this.state.opcode = this.state.activeFragmentedOperation;\n    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {\n      this.error('continuation frame cannot follow current opcode', 1002);\n      return;\n    }\n  } else {\n    if (opcode < 3 && this.state.activeFragmentedOperation != null) {\n      this.error('data frames after the initial data frame must have opcode 0', 1002);\n      return;\n    }\n    if (opcode >= 8 && compressed) {\n      this.error('control frames cannot have the Per-message Compressed bits', 1002);\n      return;\n    }\n    this.state.compressed = compressed;\n    this.state.opcode = opcode;\n    if (this.state.lastFragment === false) {\n      this.state.fragmentedOperation = true;\n      this.state.activeFragmentedOperation = opcode;\n    } else this.state.fragmentedOperation = false;\n  }\n  var handler = opcodes[this.state.opcode];\n  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);else {\n    handler.start.call(this, data);\n  }\n};\n\n/**\n * Endprocessing a packet.\n *\n * @api private\n */\n\nReceiver.prototype.endPacket = function () {\n  if (this.dead) return;\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);else if (this.state.lastFragment) this.fragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {\n    // end current fragmented operation\n    this.state.activeFragmentedOperation = null;\n  }\n  this.currentPayloadLength = 0;\n  this.state.lastFragment = false;\n  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;\n  this.state.masked = false;\n  this.expectHeader(2, this.processPacket);\n};\n\n/**\n * Reset the parser state.\n *\n * @api private\n */\n\nReceiver.prototype.reset = function () {\n  if (this.dead) return;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.fragmentedBufferPool.reset(true);\n  this.unfragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.overflow = [];\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.currentPayloadLength = 0;\n};\n\n/**\n * Unmask received data.\n *\n * @api private\n */\n\nReceiver.prototype.unmask = function (mask, buf, binary) {\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n  if (binary) return buf;\n  return buf != null ? buf.toString('utf8') : '';\n};\n\n/**\n * Handles an error\n *\n * @api private\n */\n\nReceiver.prototype.error = function (reason, protocolErrorCode) {\n  if (this.dead) return;\n  this.reset();\n  if (typeof reason == 'string') {\n    this.onerror(new Error(reason), protocolErrorCode);\n  } else if (reason.constructor == Error) {\n    this.onerror(reason, protocolErrorCode);\n  } else {\n    this.onerror(new Error(\"An error occured\"), protocolErrorCode);\n  }\n  return this;\n};\n\n/**\n * Execute message handler buffers\n *\n * @api private\n */\n\nReceiver.prototype.flush = function () {\n  if (this.processing || this.dead) return;\n  var handler = this.messageHandlers.shift();\n  if (!handler) return;\n  this.processing = true;\n  var self = this;\n  handler(function () {\n    self.processing = false;\n    self.flush();\n  });\n};\n\n/**\n * Apply extensions to message\n *\n * @api private\n */\n\nReceiver.prototype.applyExtensions = function (messageBuffer, fin, compressed, callback) {\n  var self = this;\n  if (compressed) {\n    this.extensions[PerMessageDeflate.extensionName].decompress(messageBuffer, fin, function (err, buffer) {\n      if (self.dead) return;\n      if (err) {\n        callback(new Error('invalid compressed data'));\n        return;\n      }\n      callback(null, buffer);\n    });\n  } else {\n    callback(null, messageBuffer);\n  }\n};\n\n/**\n* Checks payload size, disconnects socket when it exceeds maxPayload\n*\n* @api private\n*/\nReceiver.prototype.maxPayloadExceeded = function (length) {\n  if (this.maxPayload === undefined || this.maxPayload === null || this.maxPayload < 1) {\n    return false;\n  }\n  var fullLength = this.currentPayloadLength + length;\n  if (fullLength < this.maxPayload) {\n    this.currentPayloadLength = fullLength;\n    return false;\n  }\n  this.error('payload cannot exceed ' + this.maxPayload + ' bytes', 1009);\n  this.messageBuffer = [];\n  this.cleanup();\n  return true;\n};\n\n/**\n * Buffer utilities\n */\n\nfunction readUInt16BE(start) {\n  return (this[start] << 8) + this[start + 1];\n}\nfunction readUInt32BE(start) {\n  return (this[start] << 24) + (this[start + 1] << 16) + (this[start + 2] << 8) + this[start + 3];\n}\nfunction fastCopy(length, srcBuffer, dstBuffer, dstOffset) {\n  switch (length) {\n    default:\n      srcBuffer.copy(dstBuffer, dstOffset, 0, length);\n      break;\n    case 16:\n      dstBuffer[dstOffset + 15] = srcBuffer[15];\n    case 15:\n      dstBuffer[dstOffset + 14] = srcBuffer[14];\n    case 14:\n      dstBuffer[dstOffset + 13] = srcBuffer[13];\n    case 13:\n      dstBuffer[dstOffset + 12] = srcBuffer[12];\n    case 12:\n      dstBuffer[dstOffset + 11] = srcBuffer[11];\n    case 11:\n      dstBuffer[dstOffset + 10] = srcBuffer[10];\n    case 10:\n      dstBuffer[dstOffset + 9] = srcBuffer[9];\n    case 9:\n      dstBuffer[dstOffset + 8] = srcBuffer[8];\n    case 8:\n      dstBuffer[dstOffset + 7] = srcBuffer[7];\n    case 7:\n      dstBuffer[dstOffset + 6] = srcBuffer[6];\n    case 6:\n      dstBuffer[dstOffset + 5] = srcBuffer[5];\n    case 5:\n      dstBuffer[dstOffset + 4] = srcBuffer[4];\n    case 4:\n      dstBuffer[dstOffset + 3] = srcBuffer[3];\n    case 3:\n      dstBuffer[dstOffset + 2] = srcBuffer[2];\n    case 2:\n      dstBuffer[dstOffset + 1] = srcBuffer[1];\n    case 1:\n      dstBuffer[dstOffset] = srcBuffer[0];\n  }\n}\nfunction clone(obj) {\n  var cloned = {};\n  for (var k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      cloned[k] = obj[k];\n    }\n  }\n  return cloned;\n}\n\n/**\n * Opcode handlers\n */\n\nvar opcodes = {\n  // text\n  '1': {\n    start: function (data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        if (self.maxPayloadExceeded(firstLength)) {\n          self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n          return;\n        }\n        opcodes['1'].getData.call(self, firstLength);\n      } else if (firstLength == 126) {\n        self.expectHeader(2, function (data) {\n          var length = readUInt16BE.call(data, 0);\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['1'].getData.call(self, length);\n        });\n      } else if (firstLength == 127) {\n        self.expectHeader(8, function (data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          var length = readUInt32BE.call(data, 4);\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));\n        });\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['1'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['1'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function (err, buffer) {\n          if (err) {\n            if (err.type === 1009) {\n              return self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            }\n            return self.error(err.message, 1007);\n          }\n          if (buffer != null) {\n            if (self.maxPayload == 0 || self.maxPayload > 0 && self.currentMessageLength + buffer.length < self.maxPayload) {\n              self.currentMessage.push(buffer);\n            } else {\n              self.currentMessage = null;\n              self.currentMessage = [];\n              self.currentMessageLength = 0;\n              self.error(new Error('Maximum payload exceeded. maxPayload: ' + self.maxPayload), 1009);\n              return;\n            }\n            self.currentMessageLength += buffer.length;\n          }\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n            if (!isValidUTF8(messageBuffer)) {\n              self.error('invalid utf8 sequence', 1007);\n              return;\n            }\n            self.ontext(messageBuffer.toString('utf8'), {\n              masked: state.masked,\n              buffer: messageBuffer\n            });\n          }\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // binary\n  '2': {\n    start: function (data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        if (self.maxPayloadExceeded(firstLength)) {\n          self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n          return;\n        }\n        opcodes['2'].getData.call(self, firstLength);\n      } else if (firstLength == 126) {\n        self.expectHeader(2, function (data) {\n          var length = readUInt16BE.call(data, 0);\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['2'].getData.call(self, length);\n        });\n      } else if (firstLength == 127) {\n        self.expectHeader(8, function (data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          var length = readUInt32BE.call(data, 4, true);\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['2'].getData.call(self, length);\n        });\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['2'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['2'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function (err, buffer) {\n          if (err) {\n            if (err.type === 1009) {\n              return self.error('Max payload exceeded in compressed binary message. Aborting...', 1009);\n            }\n            return self.error(err.message, 1007);\n          }\n          if (buffer != null) {\n            if (self.maxPayload == 0 || self.maxPayload > 0 && self.currentMessageLength + buffer.length < self.maxPayload) {\n              self.currentMessage.push(buffer);\n            } else {\n              self.currentMessage = null;\n              self.currentMessage = [];\n              self.currentMessageLength = 0;\n              self.error(new Error('Maximum payload exceeded'), 1009);\n              return;\n            }\n            self.currentMessageLength += buffer.length;\n          }\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n            self.onbinary(messageBuffer, {\n              masked: state.masked,\n              buffer: messageBuffer\n            });\n          }\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // close\n  '8': {\n    start: function (data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented close is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['8'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['8'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['8'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function () {\n        if (data && data.length == 1) {\n          self.error('close packets with data must be at least two bytes long', 1002);\n          return;\n        }\n        var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;\n        if (!ErrorCodes.isValidErrorCode(code)) {\n          self.error('invalid error code', 1002);\n          return;\n        }\n        var message = '';\n        if (data && data.length > 2) {\n          var messageBuffer = data.slice(2);\n          if (!isValidUTF8(messageBuffer)) {\n            self.error('invalid utf8 sequence', 1007);\n            return;\n          }\n          message = messageBuffer.toString('utf8');\n        }\n        self.onclose(code, message, {\n          masked: state.masked\n        });\n        self.reset();\n      });\n      this.flush();\n    }\n  },\n  // ping\n  '9': {\n    start: function (data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented ping is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['9'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['9'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['9'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      data = this.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.onping(data, {\n          masked: state.masked,\n          binary: true\n        });\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // pong\n  '10': {\n    start: function (data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented pong is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['10'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function (length) {\n      var self = this;\n      if (this.state.masked) {\n        this.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['10'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        this.expectData(length, function (data) {\n          opcodes['10'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function (mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.onpong(data, {\n          masked: state.masked,\n          binary: true\n        });\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  }\n};","map":{"version":3,"names":["util","require","isValidUTF8","ErrorCodes","BufferPool","bufferUtil","PerMessageDeflate","Receiver","extensions","maxPayload","TypeError","fragmentedPoolPrevUsed","fragmentedBufferPool","db","length","used","Math","ceil","unfragmentedPoolPrevUsed","unfragmentedBufferPool","currentPayloadLength","state","activeFragmentedOperation","lastFragment","masked","opcode","fragmentedOperation","overflow","headerBuffer","Buffer","expectOffset","expectBuffer","expectHandler","currentMessage","currentMessageLength","messageHandlers","expectHeader","processPacket","dead","processing","onerror","ontext","onbinary","onclose","onping","onpong","module","exports","prototype","add","data","dataLength","push","toRead","min","fastCopy","slice","bufferForHandler","call","cleanup","handler","fromOverflow","pop","read","expectData","allocateFromPool","isFragmented","get","extensionName","error","compressed","opcodes","start","endPacket","reset","unmask","mask","buf","binary","toString","reason","protocolErrorCode","Error","constructor","flush","shift","self","applyExtensions","messageBuffer","fin","callback","decompress","err","buffer","maxPayloadExceeded","undefined","fullLength","readUInt16BE","readUInt32BE","srcBuffer","dstBuffer","dstOffset","copy","clone","obj","cloned","k","hasOwnProperty","firstLength","getData","finish","packet","type","message","concat","code","isValidErrorCode"],"sources":["C:/Users/walle/Documents/lummelundalogin/lummelundalogin/node_modules/engine.io/node_modules/ws/lib/Receiver.js"],"sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , isValidUTF8 = require('./Validation')\n  , ErrorCodes = require('./ErrorCodes')\n  , BufferPool = require('./BufferPool')\n  , bufferUtil = require('./BufferUtil')\n  , PerMessageDeflate = require('./PerMessageDeflate');\n\n/**\n * HyBi Receiver implementation\n */\n\nfunction Receiver (extensions,maxPayload) {\n  if (this instanceof Receiver === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n  if(typeof extensions==='number'){\n    maxPayload=extensions;\n    extensions={};\n  }\n\n\n  // memory pool for fragmented messages\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ?\n      Math.ceil((fragmentedPoolPrevUsed + db.used) / 2) :\n      db.used;\n  });\n\n  // memory pool for unfragmented messages\n  var unfragmentedPoolPrevUsed = -1;\n  this.unfragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ?\n      Math.ceil((unfragmentedPoolPrevUsed + db.used) / 2) :\n      db.used;\n  });\n  this.extensions = extensions || {};\n  this.maxPayload = maxPayload || 0;\n  this.currentPayloadLength = 0;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.overflow = [];\n  this.headerBuffer = new Buffer(10);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.expectHeader(2, this.processPacket);\n  this.dead = false;\n  this.processing = false;\n\n  this.onerror = function() {};\n  this.ontext = function() {};\n  this.onbinary = function() {};\n  this.onclose = function() {};\n  this.onping = function() {};\n  this.onpong = function() {};\n}\n\nmodule.exports = Receiver;\n\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function(data) {\n  if (this.dead) return;\n  var dataLength = data.length;\n  if (dataLength == 0) return;\n  if (this.expectBuffer == null) {\n    this.overflow.push(data);\n    return;\n  }\n  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);\n  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);\n  this.expectOffset += toRead;\n  if (toRead < dataLength) {\n    this.overflow.push(data.slice(toRead));\n  }\n  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {\n    var bufferForHandler = this.expectBuffer;\n    this.expectBuffer = null;\n    this.expectOffset = 0;\n    this.expectHandler.call(this, bufferForHandler);\n  }\n};\n\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\nReceiver.prototype.cleanup = function() {\n  this.dead = true;\n  this.overflow = null;\n  this.headerBuffer = null;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.unfragmentedBufferPool = null;\n  this.fragmentedBufferPool = null;\n  this.state = null;\n  this.currentMessage = null;\n  this.onerror = null;\n  this.ontext = null;\n  this.onbinary = null;\n  this.onclose = null;\n  this.onping = null;\n  this.onpong = null;\n};\n\n/**\n * Waits for a certain amount of header bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectHeader = function(length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Waits for a certain amount of data bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectData = function(length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n\n/**\n * Allocates memory from the buffer pool.\n *\n * @api private\n */\n\nReceiver.prototype.allocateFromPool = function(length, isFragmented) {\n  return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length);\n};\n\n/**\n * Start processing a new packet.\n *\n * @api private\n */\n\nReceiver.prototype.processPacket = function (data) {\n  if (this.extensions[PerMessageDeflate.extensionName]) {\n    if ((data[0] & 0x30) != 0) {\n      this.error('reserved fields (2, 3) must be empty', 1002);\n      return;\n    }\n  } else {\n    if ((data[0] & 0x70) != 0) {\n      this.error('reserved fields must be empty', 1002);\n      return;\n    }\n  }\n  this.state.lastFragment = (data[0] & 0x80) == 0x80;\n  this.state.masked = (data[1] & 0x80) == 0x80;\n  var compressed = (data[0] & 0x40) == 0x40;\n  var opcode = data[0] & 0xf;\n  if (opcode === 0) {\n    if (compressed) {\n      this.error('continuation frame cannot have the Per-message Compressed bits', 1002);\n      return;\n    }\n    // continuation frame\n    this.state.fragmentedOperation = true;\n    this.state.opcode = this.state.activeFragmentedOperation;\n    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {\n      this.error('continuation frame cannot follow current opcode', 1002);\n      return;\n    }\n  }\n  else {\n    if (opcode < 3 && this.state.activeFragmentedOperation != null) {\n      this.error('data frames after the initial data frame must have opcode 0', 1002);\n      return;\n    }\n    if (opcode >= 8 && compressed) {\n      this.error('control frames cannot have the Per-message Compressed bits', 1002);\n      return;\n    }\n    this.state.compressed = compressed;\n    this.state.opcode = opcode;\n    if (this.state.lastFragment === false) {\n      this.state.fragmentedOperation = true;\n      this.state.activeFragmentedOperation = opcode;\n    }\n    else this.state.fragmentedOperation = false;\n  }\n  var handler = opcodes[this.state.opcode];\n  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);\n  else {\n    handler.start.call(this, data);\n  }\n};\n\n/**\n * Endprocessing a packet.\n *\n * @api private\n */\n\nReceiver.prototype.endPacket = function() {\n  if (this.dead) return;\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);\n  else if (this.state.lastFragment) this.fragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {\n    // end current fragmented operation\n    this.state.activeFragmentedOperation = null;\n  }\n  this.currentPayloadLength = 0;\n  this.state.lastFragment = false;\n  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;\n  this.state.masked = false;\n  this.expectHeader(2, this.processPacket);\n};\n\n/**\n * Reset the parser state.\n *\n * @api private\n */\n\nReceiver.prototype.reset = function() {\n  if (this.dead) return;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.fragmentedBufferPool.reset(true);\n  this.unfragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.overflow = [];\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.currentPayloadLength = 0;\n};\n\n/**\n * Unmask received data.\n *\n * @api private\n */\n\nReceiver.prototype.unmask = function (mask, buf, binary) {\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n  if (binary) return buf;\n  return buf != null ? buf.toString('utf8') : '';\n};\n\n/**\n * Handles an error\n *\n * @api private\n */\n\nReceiver.prototype.error = function (reason, protocolErrorCode) {\n  if (this.dead) return;\n  this.reset();\n  if(typeof reason == 'string'){\n    this.onerror(new Error(reason), protocolErrorCode);\n  }\n  else if(reason.constructor == Error){\n    this.onerror(reason, protocolErrorCode);\n  }\n  else{\n    this.onerror(new Error(\"An error occured\"),protocolErrorCode);\n  }\n  return this;\n};\n\n/**\n * Execute message handler buffers\n *\n * @api private\n */\n\nReceiver.prototype.flush = function() {\n  if (this.processing || this.dead) return;\n\n  var handler = this.messageHandlers.shift();\n  if (!handler) return;\n\n  this.processing = true;\n  var self = this;\n\n  handler(function() {\n    self.processing = false;\n    self.flush();\n  });\n};\n\n/**\n * Apply extensions to message\n *\n * @api private\n */\n\nReceiver.prototype.applyExtensions = function(messageBuffer, fin, compressed, callback) {\n  var self = this;\n  if (compressed) {\n    this.extensions[PerMessageDeflate.extensionName].decompress(messageBuffer, fin, function(err, buffer) {\n      if (self.dead) return;\n      if (err) {\n        callback(new Error('invalid compressed data'));\n        return;\n      }\n      callback(null, buffer);\n    });\n  } else {\n    callback(null, messageBuffer);\n  }\n};\n\n/**\n* Checks payload size, disconnects socket when it exceeds maxPayload\n*\n* @api private\n*/\nReceiver.prototype.maxPayloadExceeded = function(length) {\n  if (this.maxPayload=== undefined || this.maxPayload === null || this.maxPayload < 1) {\n    return false;\n  }\n  var fullLength = this.currentPayloadLength + length;\n  if (fullLength < this.maxPayload) {\n    this.currentPayloadLength = fullLength;\n    return false;\n  }\n  this.error('payload cannot exceed ' + this.maxPayload + ' bytes', 1009);\n  this.messageBuffer=[];\n  this.cleanup();\n\n  return true;\n};\n\n/**\n * Buffer utilities\n */\n\nfunction readUInt16BE(start) {\n  return (this[start]<<8) +\n         this[start+1];\n}\n\nfunction readUInt32BE(start) {\n  return (this[start]<<24) +\n         (this[start+1]<<16) +\n         (this[start+2]<<8) +\n         this[start+3];\n}\n\nfunction fastCopy(length, srcBuffer, dstBuffer, dstOffset) {\n  switch (length) {\n    default: srcBuffer.copy(dstBuffer, dstOffset, 0, length); break;\n    case 16: dstBuffer[dstOffset+15] = srcBuffer[15];\n    case 15: dstBuffer[dstOffset+14] = srcBuffer[14];\n    case 14: dstBuffer[dstOffset+13] = srcBuffer[13];\n    case 13: dstBuffer[dstOffset+12] = srcBuffer[12];\n    case 12: dstBuffer[dstOffset+11] = srcBuffer[11];\n    case 11: dstBuffer[dstOffset+10] = srcBuffer[10];\n    case 10: dstBuffer[dstOffset+9] = srcBuffer[9];\n    case 9: dstBuffer[dstOffset+8] = srcBuffer[8];\n    case 8: dstBuffer[dstOffset+7] = srcBuffer[7];\n    case 7: dstBuffer[dstOffset+6] = srcBuffer[6];\n    case 6: dstBuffer[dstOffset+5] = srcBuffer[5];\n    case 5: dstBuffer[dstOffset+4] = srcBuffer[4];\n    case 4: dstBuffer[dstOffset+3] = srcBuffer[3];\n    case 3: dstBuffer[dstOffset+2] = srcBuffer[2];\n    case 2: dstBuffer[dstOffset+1] = srcBuffer[1];\n    case 1: dstBuffer[dstOffset] = srcBuffer[0];\n  }\n}\n\nfunction clone(obj) {\n  var cloned = {};\n  for (var k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      cloned[k] = obj[k];\n    }\n  }\n  return cloned;\n}\n\n/**\n * Opcode handlers\n */\n\nvar opcodes = {\n  // text\n  '1': {\n    start: function(data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        if (self.maxPayloadExceeded(firstLength)){\n          self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n          return;\n        }\n        opcodes['1'].getData.call(self, firstLength);\n      }\n      else if (firstLength == 126) {\n        self.expectHeader(2, function(data) {\n          var length = readUInt16BE.call(data, 0);\n          if (self.maxPayloadExceeded(length)){\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['1'].getData.call(self, length);\n        });\n      }\n      else if (firstLength == 127) {\n        self.expectHeader(8, function(data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          var length = readUInt32BE.call(data, 4);\n          if (self.maxPayloadExceeded(length)){\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));\n        });\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['1'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['1'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function(callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function(err, buffer) {\n          if (err) {\n            if(err.type===1009){\n                return self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            }\n            return self.error(err.message, 1007);\n          }\n          if (buffer != null) {\n            if( self.maxPayload==0 || (self.maxPayload > 0 && (self.currentMessageLength + buffer.length) < self.maxPayload) ){\n              self.currentMessage.push(buffer);\n            }\n            else{\n                self.currentMessage=null;\n                self.currentMessage = [];\n                self.currentMessageLength = 0;\n                self.error(new Error('Maximum payload exceeded. maxPayload: '+self.maxPayload), 1009);\n                return;\n            }\n            self.currentMessageLength += buffer.length;\n          }\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n            if (!isValidUTF8(messageBuffer)) {\n              self.error('invalid utf8 sequence', 1007);\n              return;\n            }\n            self.ontext(messageBuffer.toString('utf8'), {masked: state.masked, buffer: messageBuffer});\n          }\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // binary\n  '2': {\n    start: function(data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n          if (self.maxPayloadExceeded(firstLength)){\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n        opcodes['2'].getData.call(self, firstLength);\n      }\n      else if (firstLength == 126) {\n        self.expectHeader(2, function(data) {\n          var length = readUInt16BE.call(data, 0);\n          if (self.maxPayloadExceeded(length)){\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['2'].getData.call(self, length);\n        });\n      }\n      else if (firstLength == 127) {\n        self.expectHeader(8, function(data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          var length = readUInt32BE.call(data, 4, true);\n          if (self.maxPayloadExceeded(length)){\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n          opcodes['2'].getData.call(self, length);\n        });\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['2'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['2'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function(callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function(err, buffer) {\n          if (err) {\n            if(err.type===1009){\n                return self.error('Max payload exceeded in compressed binary message. Aborting...', 1009);\n            }\n            return self.error(err.message, 1007);\n          }\n          if (buffer != null) {\n            if( self.maxPayload==0 || (self.maxPayload > 0 && (self.currentMessageLength + buffer.length) < self.maxPayload) ){\n              self.currentMessage.push(buffer);\n            }\n            else{\n                self.currentMessage=null;\n                self.currentMessage = [];\n                self.currentMessageLength = 0;\n                self.error(new Error('Maximum payload exceeded'), 1009);\n                return;\n            }\n            self.currentMessageLength += buffer.length;\n          }\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n            self.onbinary(messageBuffer, {masked: state.masked, buffer: messageBuffer});\n          }\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // close\n  '8': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented close is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['8'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['8'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['8'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n\n      var state = clone(this.state);\n      this.messageHandlers.push(function() {\n        if (data && data.length == 1) {\n          self.error('close packets with data must be at least two bytes long', 1002);\n          return;\n        }\n        var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;\n        if (!ErrorCodes.isValidErrorCode(code)) {\n          self.error('invalid error code', 1002);\n          return;\n        }\n        var message = '';\n        if (data && data.length > 2) {\n          var messageBuffer = data.slice(2);\n          if (!isValidUTF8(messageBuffer)) {\n            self.error('invalid utf8 sequence', 1007);\n            return;\n          }\n          message = messageBuffer.toString('utf8');\n        }\n        self.onclose(code, message, {masked: state.masked});\n        self.reset();\n      });\n      this.flush();\n    },\n  },\n  // ping\n  '9': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented ping is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['9'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['9'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['9'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      data = this.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function(callback) {\n        self.onping(data, {masked: state.masked, binary: true});\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // pong\n  '10': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented pong is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['10'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (this.state.masked) {\n        this.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['10'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        this.expectData(length, function(data) {\n          opcodes['10'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function(callback) {\n        self.onpong(data, {masked: state.masked, binary: true});\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}